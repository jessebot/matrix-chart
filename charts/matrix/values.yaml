---
# Runtime configuration for Synapse and settings related to the Matrix protocol
matrix:
  # Manual overrides for homeserver.yaml, the main config file for Synapse
  # Its highly recommended that you take a look at the defaults in
  # templates/synapse/_homeserver.yaml, to get a sense of the requirements and
  # default config options to use other services in this chart.
  # -- Replace homeserver.yaml will be replaced with these contents
  homeserverOverride: {}
  # -- Contents will be appended to the end of the default configuration
  homeserverExtra: {}

  # -- Domain name of the server: This is not necessarily the host name where
  # the service is reachable. In fact, you may want to omit any subdomains from
  # this value as the server name set here will be the name of your homeserver
  # in the fediverse, & will be the domain name at the end of every username
  serverName: "example.com"

  # -- Enable anonymous telemetry to matrix.org
  telemetry: false

  # This is *optional* if an Ingress is configured below. If hostname is
  # unspecified, the Synapse hostname of the Ingress will be used
  # -- Hostname where Synapse can be reached.
  # hostname: "matrix.example.com"

  # -- Set to false to disable presence (online/offline indicators)
  presence: true

  # -- Set to true to block non-admins from inviting users to any rooms
  blockNonAdminInvites: false

  # -- Set to false to disable message searching
  search: true

  # Which types of rooms to enable end-to-end encryption on by default
  # off:    none
  # all:    all rooms
  # invite: private msg/room created w/ private_chat or trusted_private_chat
  #         room presets
  encryptByDefault: invite

  # -- Email address of the administrator
  adminEmail: "admin@example.com"

  # -- Settings related to image and multimedia uploads
  uploads:
    # -- Max upload size in bytes
    maxSize: 10M

    # -- Max image size in pixels
    maxPixels: 32M

  # Settings related to federation
  federation:
    # -- Set to false to disable federation and run an isolated homeserver
    enabled: true

    # -- Allow members of other homeservers to fetch *public* rooms
    allowPublicRooms: true

    # -- Allow list of domains to federate with (comment for all domains
    #    except blacklisted)
    whitelist: []

    # -- IP addresses to blacklist federation requests to
    blacklist:
      - '127.0.0.0/8'
      - '10.0.0.0/8'
      - '172.16.0.0/12'
      - '192.168.0.0/16'
      - '100.64.0.0/10'
      - '169.254.0.0/16'
      - '::1/128'
      - 'fe80::/64'
      - 'fc00::/7'
    ingress:
      enabled: true
      tls:
        enabled: true
      host: matrix-fed.chart-example.local
      # -- ingressClassName for the k8s ingress
      className: "nginx"
      annotations:
        # -- required for the Nginx ingress provider. You can remove it if you
        # use a different ingress provider
        nginx.ingress.kubernetes.io/configuration-snippet: |
          proxy_intercept_errors off;
        # -- required for TLS certs issued by cert-manager
        cert-manager.io/cluster-issuer: letsencrypt-staging

  # User registration settings
  registration:
    # -- Allow new users to register an account
    enabled: false

    # -- If set, allows registration of standard or admin accounts by anyone who
    # has the shared secret, even if registration is otherwise disabled.
    # ignored if existingSecret is passed in
    sharedSecret: ""

    # -- if set, allows user to generate a random shared secret in a k8s secret
    # ignored if existingSecret is passed in
    generateSharedSecret: false

    # -- if set, pull sharedSecret from an existing k8s secret
    existingSecret: ""

    # -- key in existing k8s secret for registration shared secret
    secretKey: "registrationSharedSecret"

    # -- Allow users to join rooms as a guest
    allowGuests: false

    # Required "3PIDs" - third-party identifiers such as email or msisdn (SMS)
    # required3Pids:
    #   - email
    #   - msisdn

    # -- Rooms to automatically join all new users to
    autoJoinRooms: []
    # - "#welcome:example.com"

    # -- Whether to allow token based registration
    requiresToken: false

  # OpenID Connect integration. The following settings can be used to make Synapse
  # use an OpenID Connect Provider for authentication, instead of its internal
  # password database. will be considered legacy way of doing things after
  # element-x comes out of beta ref:
  # https://github.com/matrix-org/synapse/blob/master/docs/openid.md
  oidc:
    # -- set to true to enable authorization against an OpenID Connect server
    # unless using OIDC on synapse AND you want to allow usage of Element-X (the
    # beta of element), then you must set experimental_feature.msc3861.enabled
    # to True to use the MAS (Matrix Authentication Service) and fill out the values there.
    enabled: false
    # -- existing secret to use for the OIDC config
    existingSecret: ""
    # keys in an existing secret to use for oidc config
    secretKeys:
      # -- key in secret with the issuer
      issuer: "issuer"
      # -- key in secret with the client_id
      client_id: "client_id"
      # -- key in secret with the client_secret
      client_secret: "client_secret"
      # -- key in secret with the authorization_endpoint if discovery is disabled
      authorization_endpoint: ""
      # -- key in secret with the token_endpoint if discovery is disabled
      token_endpoint: ""
      # -- key in secret with the userinfo_endpoint if discovery is disabled
      userinfo_endpoint: ""
    # -- each of these will be templated under oidc_providers in homeserver.yaml
    # ref: https://matrix-org.github.io/synapse/latest/openid.html?search=
    providers:
      # -- id of your identity provider, e.g. dex
      - idp_id: ""
        # -- human readable comment of your identity provider, e.g. "My Dex Server"
        idp_name: ""
        # -- optional styling hint for clients
        idp_brand: ""
        # -- turn off discovery by setting this to false
        discover: true
        # set to true to skip metadata verification. Defaults to false. Use this if
        # you are connecting to a provider that is not OpenID Connect compliant.
        # Avoid this in production.
        skip_verification: false
        # -- OIDC issuer. Used to validate tokens and (if discovery is enabled) to
        # discover the provider's endpoints. Required if 'enabled' is true.
        issuer: "https://accounts.example.com/"
        # -- oauth2 client id to use. Required if 'enabled' is true.
        client_id: "provided-by-your-issuer"
        # -- oauth2 client secret to use. Required if 'enabled' is true.
        client_secret: "provided-by-your-issuer"
        # -- auth method to use when exchanging the token. Valid values are:
        # 'client_secret_basic' (default), 'client_secret_post' and 'none'.
        client_auth_method: client_secret_post
        # -- list of scopes to request. should normally include the "openid" scope.
        # Defaults to ["openid"].
        scopes:
          - "openid"
          - "profile"
        # -- oauth2 authorization endpoint. Required if provider discovery disabled.
        authorization_endpoint: "https://accounts.example.com/oauth2/auth"
        # -- the oauth2 token endpoint. Required if provider discovery is disabled.
        token_endpoint: "https://accounts.example.com/oauth2/token"
        # -- the OIDC userinfo endpoint. Required if discovery is disabled and the
        # "openid" scope is not requested.
        userinfo_endpoint: "https://accounts.example.com/userinfo"
        # An external module can be provided here as a custom solution to mapping
        # attributes returned from a OIDC provider onto a matrix user.
        user_mapping_provider:
          config:
            # -- name of the claim containing a unique identifier for user. Defaults
            # to `sub`, which OpenID Connect compliant providers should provide.
            subject_claim: ""
            # This must be configured if using the default mapping provider.
            localpart_template: ""
            # Jinja2 template for the display name to set on first login.
            # If unset, no displayname will be set.
            display_name_template: ""
            # for twitter: https://matrix-org.github.io/synapse/latest/openid.html?search=#twitter
            picture_template: "{{ user.data.profile_image_url }}"
        # optional - maybe useful for keycloak
        backchannel_logout_enabled: true

  # -- require auth for profile requests, not useful if federation is enable
  require_auth_for_profile_requests: true

  # -- require a user to share a room with another user in order
  # to retrieve their profile information. Only checked on Client-Server
  # requests. Profile requests from other servers should be checked by the
  # requesting server.
  limit_profile_requests_to_users_who_share_rooms: true

  # -- minimum required tls version support. set to 1.3 if you know all clients implement this. may break public servers
  federation_client_minimum_tls_version: 1.2

  # Settings for the URL preview crawler
  urlPreviews:
    # -- Enable URL previews. WARN: Make sure to review default rules below to
    # ensure that users cannot crawl sensitive internal endpoints on yr cluster
    enabled: false

    # Blacklists and whitelists for the URL preview crawler
    rules:
      # -- Max size of a crawlable page. Keep this low to prevent a DOS vector
      maxSize: 10M

      # Whitelist and blacklist for crawlable IP addresses
      ip:
        whitelist: []
        blacklist:
          - '127.0.0.0/8'
          - '10.0.0.0/8'
          - '172.16.0.0/12'
          - '192.168.0.0/16'
          - '100.64.0.0/10'
          - '169.254.0.0/16'
          - '::1/128'
          - 'fe80::/64'
          - 'fc00::/7'

      # -- Whitelist and blacklist based on URL pattern matching
      url: {}
      # whitelist:
      # blacklist:
      #  # blacklist any URL with a username in its URI
      #  - username: '*'
      #
      #  # blacklist all *.google.com URLs
      #  - netloc: 'google.com'
      #  - netloc: '*.google.com'
      #
      #  # blacklist all plain HTTP URLs
      #  - scheme: 'http'
      #
      #  # blacklist http(s)://www.acme.com/foo
      #  - netloc: 'www.acme.com'
      #    path: '/foo'
      #
      #  # blacklist any URL with a literal IPv4 address
      #  - netloc: '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$'

  # -- How long to keep redacted events in unredacted form in the database
  retentionPeriod: 7d

  security:
    # a secret which is used to sign access tokens. If none is specified,
    # the registration_shared_secret is used, if one is given; otherwise,
    # a secret key is derived from the signing key.
    #
    # macaroonSecretKey: <PRIVATE STRING>

    # This disables the warning that is emitted when the
    # trustedKeyServers include 'matrix.org'. See below.
    # Set to false to re-enable the warning.
    #
    surpressKeyServerWarning: true

    # The trusted servers to download signing keys from.
    #
    # When we need to fetch a signing key, each server is tried in parallel.
    #
    # Normally, the connection to the key server is validated via TLS certs.
    # Additional security can be provided by configuring a `verify key`, which
    # will make synapse check that the response is signed by that key.
    #
    # This setting supercedes an older setting named `perspectives`. Old format
    # is still supported for backwards-compatibility, but it is deprecated.
    #
    # 'trustedKeyServers' defaults to matrix.org, but using it will generate a
    # warning on start-up. To suppress this warning, set
    # 'surpressKeyServerWarning' to true.
    #
    # Options for each entry in the list include:
    #
    #  serverName: the name of the server. required.
    #
    #  verifyKeys: an optional map from key id to base64-encoded public key.
    #     If specified, we will check that the response is signed by at least
    #     one of the given keys.
    #
    #  acceptKeysInsecurely: a boolean. Normally, if `verify_keys` is unset,
    #    and federation_verify_certificates is not `true`, synapse will refuse
    #    to start, because this would allow anyone who can spoof DNS responses
    #    to masquerade as the trusted key server. If you know what you are doing
    #    and are sure that your network environment provides a secure connection
    #    to the key server, you can set this to `true` to override this
    #    behaviour.
    #
    # An example configuration might look like:
    #
    # trustedKeyServers:
    #   - serverName: my_trusted_server.example.com
    #     verifyKeys:
    #       - id: "ed25519:auto"
    #         key: "abcdefghijklmnopqrstuvwxyzabcdefghijklmopqr"
    #     acceptKeysInsecurely: false
    #   - serverName: my_other_trusted_server.example.com

  # -- Set to true to globally block access to the homeserver
  disabled: false
  # -- Human readable reason for why the homeserver is blocked
  disabledMessage: ""

  logging:
    # -- Root log level is the default log level for log outputs that don't
    # have more specific settings.
    rootLogLevel: WARNING
    # -- beware: increasing this to DEBUG will make synapse log sensitive
    # information such as access tokens.
    sqlLogLevel: WARNING
    # -- The log level for the synapse server
    synapseLogLevel: WARNING

  experimental_features:
    # -- use an existing secret for all msc3861 (matrix authentication service) related values
    # if set, all other msc3861 values are ignored (issuer, client_id,
    # client_auth_method, client_secret, admin_token, account_management_url)
    msc3861ExistingSecret: ""

    msc3861SecretKeys:
      # -- secret key to use in existing secret for masc3861 issuer
      issuer: ""
      # -- secret key to use in existing secret for masc3861 client id
      client_id: ""
      # -- secret key to use in existing secret for masc3861 client secret
      client_secret: ""
      # -- secret key to use in existing secret for masc3861 admin_token
      admin_token: ""
      # -- secret key to use in existing secret for masc3861 account_management_url
      account_management_url: ""

    msc3861:
      # -- experimental_feature msc3861 - enable this if you want to use the matrix authentication service
      # Likely needed if using OIDC on synapse and you want to allow usage of Element-X (the beta of element)
      # See: [Matrix authentication service home server docs](https://matrix-org.github.io/matrix-authentication-service/setup/homeserver.html#configure-the-homeserver-to-delegate-authentication-to-the-service), [full matrix authentication service docs](https://matrix-org.github.io/matrix-authentication-service/index.html), and [issue#1915](https://github.com/element-hq/element-meta/issues/1915#issuecomment-2119297748) where this is being discussed
      enabled: false

      # -- Synapse will call `{issuer}/.well-known/openid-configuration` to get the OIDC configuration
      issuer: http://localhost:8080/

      # -- Matches the `client_id` in the auth service config
      client_id: 0000000000000000000SYNAPSE

      # -- Matches the `client_auth_method` in the auth service config
      client_auth_method: client_secret_basic

      # -- Matches the `client_secret` in the auth service config
      client_secret: "SomeRandomSecret"

      # -- Matches the `matrix.secret` in the auth service config
      admin_token: "AnotherRandomSecret"

      # -- URL to advertise to clients where users can self-manage their account
      account_management_url: "http://localhost:8080/account"

s3:
  # -- enable s3 storage via https://github.com/matrix-org/synapse-s3-storage-provider
  enabled: false
  # -- your s3 endpoint
  endpoint: ""
  # -- name of the bucket to use
  bucket: ""
  # -- optional region to use for s3
  region: ""
  # -- optional Server Side Encryption for Customer-provided keys
  sse_c_key: ""
  # -- optional SSE-C algorithm - very likely AES256
  sse_algorithm: "AES256"
  # -- use credentials from an existing kubernetes secret
  existingSecret: ""
  # these are the keys within the existing k8s secret to use for s3 credentials
  secretKeys:
    # -- key in existing secret fo the S3 key
    accessKey: "S3_ACCESS_KEY"
    # -- key in existing secret fo the S3 secret
    secretKey: "S3_SECRET_KEY"
  cronjob:
    # -- enable a regular cleanup k8s cronjob to automatically backup everything
    # to your s3 bucket for you and delete it from local disk ref:
    # https://github.com/matrix-org/synapse-s3-storage-provider/tree/main#regular-cleanup-job
    enabled: false
    # -- cron schedule to run the k8s cronjob. Defaults to every day at midnight
    schedule: "0 0 * * *"
    # -- this is the age of files you'd like to clean up, defaults files not used
    # within two months (2m)
    file_age: 2m

# Persistent volumes configuration
volumes:
  # Uploaded attachments/multimedia
  media:
    # -- Capacity of the media PVC - ignored if using exsitingClaim
    capacity: 10Gi
    # -- Storage class of the media PVC - ignored if using exsitingClaim
    storageClass: ""
    # -- name of an existing PVC to use for uploaded attachments and multimedia
    existingClaim: ""
  signingKey:
    # -- Capacity of the signing key PVC. Note: 1Mi is more than enough, but
    # some cloud providers set a min PVC size of 1Mi or 1Gi, adjust as necessary
    capacity: 1Mi
    # -- Storage class (optional)
    storageClass: ""
    # -- name of an existing persistent volume claim to use for signing key
    existingClaim: ""
  synapseConfig:
    # -- Capacity of the signing key PVC. Note: 1Mi is more than enough, but
    # some cloud providers set a min PVC size of 1Mi or 1Gi, adjust as necessary
    capacity: 1Mi
    # -- Storage class (optional)
    storageClass: ""
    # -- name of an existing persistent volume claim for synapse config file
    existingClaim: ""
  # optional PVC used only when s3.enabled is set to true, to install synapse-s3-storage-provider
  extraPipPackages:
    # -- Capacity of the extra pip packages PVC. Note: 1Mi is more than enough, but
    # some cloud providers set a min PVC size of 1Mi or 1Gi, adjust as necessary
    capacity: 100Mi
    # -- Storage class (optional)
    storageClass: ""
    # -- name of an existing persistent volume claim for the extra pip packages
    existingClaim: ""

externalDatabase:
  # -- enable using an external database *instead of* the Bitnami PostgreSQL sub-chart
  # if externalDatabase.enabled is set to true, postgresql.enabled must be set to false
  enabled: false
  # optional SSL parameters for postgresql, if using your own db instead of the subchart
  # ref: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS
  # -- sslmode to use, example: verify-full
  sslmode: ""
  # make sure any paths here are reflected in synapse.extraVolumes and synapse.extraVolumeMounts
  # -- optional: tls/ssl root cert for postgresql connections
  sslrootcert: ""
  # -- optional: tls/ssl cert for postgresql connections
  sslcert: ""
  # -- optional: tls/ssl key for postgresql connections
  sslkey: ""
  # database credentials to use if you don't use an existingSecret
  # -- username of matrix postgres user
  username: matrix
  # -- password of matrix postgres user - ignored using exsitingSecret
  password: changeme
  # -- which port to use to connect to your database server
  port: 5432
  # -- hostname of db server. Can be left blank if using postgres subchart
  hostname: ""
  # -- name of the database to try and connect to
  database: "matrix"
  # -- Name of existing secret to use for PostgreSQL credentials
  existingSecret: ""
  # if externalDatabase.existingSecret is provided, the following are ignored
  # password, username, hostname, database
  # secretKeys to grab from existingSecret
  secretKeys:
    # -- key in existingSecret with hostname of the database
    databaseHostname: hostname
    # -- key in existingSecret with name of the database
    database: database
    # -- key in existingSecret with username for matrix to connect to db
    databaseUsername: username
    # -- key in existingSecret with password for matrix to connect to db
    userPasswordKey: password
    # -- key in existingSecret with the admin postgresql password
    adminPasswordKey: postgresPassword


# PostgreSQL Database configuration for synapse, for more options:
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql
postgresql:
  # -- Whether to deploy the Bitnami Postgresql sub chart
  # If postgresql.enabled is set to true, externalDatabase.enabled must be set to false
  # else if externalDatabase.enabled is set to true, postgresql.enabled must be set to false
  enabled: true
  persistence:
    enabled: false
  volumePermissions:
    # -- Enable init container that changes the owner and group of the PVC
    enabled: true
  global:
    postgresql:
      # global.postgresql.auth overrides postgresql.auth
      auth:
        # database credentials to use if you don't use an existingSecret
        # -- username of matrix postgres user
        username: matrix
        # -- password of matrix postgres user - ignored using exsitingSecret
        password: changeme
        # -- which port to use to connect to your database server
        port: 5432
        # -- Name of existing secret to use for PostgreSQL credentials
        existingSecret: ""
        # secretKeys to grab from existingSecret
        # if postgresql.existingSecret is provided, the following are ignored
        # postgresql.password/username/hostname/database
        secretKeys:
          # -- key in existingSecret with hostname of the database
          databaseHostname: hostname
          # -- key in existingSecret with name of the database
          database: database
          # -- key in existingSecret with username for matrix to connect to db
          databaseUsername: username
          # -- key in existingSecret with password for matrix to connect to db
          userPasswordKey: password
          # -- key in existingSecret with the admin postgresql password
          adminPasswordKey: postgresPassword

  # primary database node config
  primary:
    # -- run the scripts in templates/postgresql/initdb-configmap.yaml
    # If using an external Postgres server, make sure to configure the database
    # ref: https://github.com/matrix-org/synapse/blob/master/docs/postgres.md
    initdb:
      scriptsConfigMap: "{{ .Release.Name }}-postgresql-initdb"

    podSecurityContext:
      enabled: true
      runAsUser: 1000
      fsGroup: 1000

# Synapse (home server that implements matrix) Kubernetes resource settings
synapse:
  image:
    # -- image registry and repository to use for synapse
    repository: "matrixdotorg/synapse"
    # -- tag of synapse docker image to use. change this to latest to grab the
    #    cutting-edge release of synapse
    tag: ""
    # -- pullPolicy for synapse image, Use Always if using image.tag: latest
    pullPolicy: IfNotPresent

  service:
    # -- service type for synpase
    type: ClusterIP
    # -- service port for synapse
    port: 80
    federation:
      type: ClusterIP
      port: 80

  ingress:
    enabled: true
    # -- hostname for your synapse server
    host: matrix.chart-example.local
    # -- ingressClassName for the k8s ingress
    className: "nginx"
    tls:
      enabled: true
      secretName: "matrix-tls"
    annotations:
      # -- This annotation is required for the Nginx ingress provider. You can
      # remove it if you use a different ingress provider
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_intercept_errors off;
      # -- required for TLS certs issued by cert-manager
      cert-manager.io/cluster-issuer: letsencrypt-staging
      # an example for returning the correct json required for syncv3
      # please change matrix.chart-example.local to your domain
      # see more info here: https://github.com/matrix-org/sliding-sync/blob/693587ef7e1c47cd04a667332ef133146132a713/README.md?plain=1#L51-L61
      #
      # nginx.ingress.kubernetes.io/server-snippet: |-
      #   location = /.well-known/matrix/client {
      #       return 200 '{"m.homeserver": {"base_url": "https://matrix.chart-example.local"},"org.matrix.msc3575.proxy": {"url": "https://matrix.chart-example.local"},"org.matrix.msc2965.authentication": {"issuer": "https://example.com/", "account": "https://auth.example.com/account"}}';
      #   }

  replicaCount: 1
  resources: {}
  # Configure timings for readiness, startup, and liveness probes here
  probes:
    readiness:
      # -- readiness probe seconds before timing out
      timeoutSeconds: 5
      # -- readiness probe seconds trying again
      periodSeconds: 10
    startup:
      # -- startup probe seconds before timing out
      timeoutSeconds: 5
      # -- startup probe seconds trying again
      periodSeconds: 5
      # -- startup probe times to try and fail before giving up
      failureThreshold: 6
    liveness:
      # -- liveness probe seconds before timing out
      timeoutSeconds: 5
      # -- liveness probe seconds trying again
      periodSeconds: 10


  # -- securityContext for the synapse CONTAINER ONLY
  # Does not work by default in all cloud providers, disable by default
  securityContext:
    # -- user ID to run the synapse container as
    runAsUser: 1000
    # -- group ID to run the synapse container as
    runAsGroup: 1000
    # -- Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed.
    runAsNonRoot: true
    # -- Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.
    readOnlyRootFilesystem: false
    # -- AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.
    allowPrivilegeEscalation: false

  # -- securityContext for the entire synapse pod, including the all containers
  # Does not work by default in all cloud providers, disable by default
  podSecurityContext:
    # -- user ID to run the synapse POD as
    runAsUser: 1000
    # -- group ID to run the synapse POD as
    runAsGroup: 1000
    # -- A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.
    fsGroup: 1000
    # -- Indicates that the pod's containers must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed.
    runAsNonRoot: true
    # -- Enable if your k8s environment allows containers to chuser/setuid
    # https://github.com/matrix-org/synapse/blob/96cf81e312407f0caba1b45ba9899906b1dcc098/docker/start.py#L196
    env: false

  # -- Labels to be appended to all Synapse resources
  labels:
    component: synapse

  # Prometheus metrics for Synapse
  # https://github.com/matrix-org/synapse/blob/master/docs/metrics-howto.md
  metrics:
    # -- Whether Synapse should capture metrics on an additional endpoint
    enabled: true
    # -- Port to listen on for metrics scraping
    port: 9092
    annotations: true

  # -- optiona: extra env variables to pass to the matrix synapse deployment
  extraEnv: []

  # -- optional: extra volumes for the matrix synapse deployment
  extraVolumes: []

  # -- optional: extra volume mounts for the matrix synapse deployment
  extraVolumeMounts: []

# values for https://github.com/small-hack/matrix-sliding-sync-chart
slidingSync:
  enabled: false
  postgresql:
    # -- Whether to deploy the Bitnami Postgresql sub chart
    # If postgresql.enabled is set to true, externalDatabase.enabled must be set to false
    # else if externalDatabase.enabled is set to true, postgresql.enabled must be set to false
    enabled: true
    persistence:
      enabled: false
    volumePermissions:
      # -- Enable init container that changes the owner and group of the PVC
      enabled: true
    global:
      postgresql:
        # global.postgresql.auth overrides postgresql.auth
        auth:
          # database credentials to use if you don't use an existingSecret
          # -- username of matrix-sliding-sync postgres user
          username: syncv3
          # -- password of matrix-sliding-sync postgres user - ignored using exsitingSecret
          password: changeme
          # -- which port to use to connect to your database server
          port: 5432
          # -- name of the database
          database: syncv3
          # -- Name of existing secret to use for PostgreSQL credentials
          existingSecret: ""
          # secretKeys to grab from existingSecret
          # if postgresql.existingSecret is provided, the following are ignored
          # postgresql.password/username/hostname/database
          secretKeys:
            # -- key in existingSecret with hostname of the database
            databaseHostname: hostname
            # -- key in existingSecret with name of the database
            database: database
            # -- key in existingSecret with username for matrix to connect to db
            databaseUsername: username
            # -- key in existingSecret with password for matrix to connect to db
            userPasswordKey: password
            # -- key in existingSecret with the admin postgresql password
            adminPasswordKey: postgresPassword

  externalDatabase:
    # -- enable using an external database *instead of* the Bitnami PostgreSQL sub-chart
    # if externalDatabase.enabled is set to true, postgresql.enabled must be set to false
    enabled: false
    # optional SSL parameters for postgresql, if using your own db instead of the subchart
    # ref: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS
    # -- sslmode to use, example: verify-full
    sslmode: ""
    # make sure any paths here are reflected in slidingSync.extraVolumes and slidingSync.extraVolumeMounts
    # -- optional: tls/ssl root cert for postgresql connections
    sslrootcert: ""
    # -- optional: tls/ssl cert for postgresql connections
    sslcert: ""
    # -- optional: tls/ssl key for postgresql connections
    sslkey: ""
    # database credentials to use if you don't use an existingSecret
    # -- username of matrix-sliding-sync postgres user
    username: syncv3
    # -- password of matrix-sliding-sync postgres user - ignored using exsitingSecret
    password: changeme
    # -- which port to use to connect to your database server
    port: 5432
    # -- hostname of db server. Can be left blank if using postgres subchart
    hostname: ""
    # -- name of the database to try and connect to
    database: "syncv3"
    # -- Name of existing secret to use for PostgreSQL credentials
    existingSecret: ""
    # if externalDatabase.existingSecret is provided, the following are ignored
    # password, username, hostname, database
    # secretKeys to grab from existingSecret
    secretKeys:
      # -- key in existingSecret with hostname of the database
      databaseHostname: hostname
      # -- key in existingSecret with name of the database
      database: database
      # -- key in existingSecret with username for matrix to connect to db
      databaseUsername: username
      # -- key in existingSecret with password for matrix to connect to db
      userPasswordKey: password
      # -- key in existingSecret with the admin postgresql password
      adminPasswordKey: postgresPassword

  syncv3:
    # -- existing kubernetes secret for ALL syncv3 env vars listed below. if set, ignores all values below, everything under syncv3 including syncvc.otlp.
    existingSecret: ""
    # -- SYNCV3_SERVER - Required. The destination homeserver to talk to (CS API HTTPS URL) e.g 'https://matrix-client.matrix.org' (Supports unix socket: /path/to/socket)
    server: ""
    # -- SYNCV3_SECRET - Required. A secret to use to encrypt access tokens. Must remain the same for the lifetime of the database. If both syncv3.secret and syncv3.existingSecret are not set, we will autogenerate this value
    secret: ""
    # -- SYNCV3_BINDADDR - The interface and port to listen on. (Supports unix socket: /path/to/socket)
    bindaddr: "0.0.0.0:8008"
    # -- SYNCV3_TLS_CERT - Default: unset. Path to a certificate file to serve to HTTPS clients. Specifying this enables TLS on the bound address.
    tlsCert: ""
    # -- SYNCV3_TLS_KEY - Default: unset. Path to a key file for the certificate. Must be provided along with the certificate file.
    tlsKey: ""
    # -- SYNCV3_PPROF - Default: unset. The bind addr for pprof debugging e.g ':6060'. If not set, does not listen.
    pprof: ""
    # -- SYNCV3_PROM - Default: unset. The bind addr for Prometheus metrics, which will be accessible at /metrics at this address.
    prom: ""
    otlp:
      # -- SYNCV3_OTLP_URL - Default: unset. The OTLP HTTP URL to send spans to e.g https://localhost:4318 - if unset does not send OTLP traces.
      url: ""
      # -- SYNCV3_OTLP_USERNAME - Default: unset. The OTLP username for Basic auth. If unset, does not send an Authorization header.
      username: ""
      # -- SYNCV3_OTLP_PASSWORD - Default: unset. The OTLP password for Basic auth. If unset, does not send an Authorization header.
      password: ""
      existingSecret: ""

    # -- SYNCV3_SENTRY_DSN - Default: unset. The Sentry DSN to report events to e.g https://sliding-sync@sentry.example.com/123 - if unset does not send sentry events.
    sentryDsn: ""
    # -- SYNCV3_LOG_LEVEL - The level of verbosity for messages logged. Available values are trace, debug, info, warn, error and fatal
    logLevel: "info"
    # -- SYNCV3_MAX_DB_CONN - Default: unset. Max database connections to use when communicating with postgres. Unset or 0 means no limit.
    maxDbConn: ""


mas:
  enabled: false
  # PostgreSQL Database configuration for matrix Authentication Service, for more options:
  # https://github.com/bitnami/charts/tree/main/bitnami/postgresql
  postgresql:
    # -- Whether to deploy the Bitnami Postgresql sub chart
    # If postgresql.enabled is set to true, externalDatabase.enabled must be set to false
    # else if externalDatabase.enabled is set to true, postgresql.enabled must be set to false
    enabled: false
    # persistence:
    #   enabled: false
    volumePermissions:
      # -- Enable init container that changes the owner and group of the PVC
      enabled: true

    tls:
      # -- Enable TLS traffic support for postgresql, see [bitnami/charts/postgresql#securing-traffic-using-tls](https://github.com/bitnami/charts/tree/main/bitnami/postgresql#securing-traffic-using-tls)
      enabled: false
      # -- Generate automatically self-signed TLS certificates
      autoGenerated: false
      # -- Whether to use the server's TLS cipher preferences rather than the client's
      preferServerCiphers: true
      # -- Name of an existing secret that contains the certificates
      certificatesSecret: ""
      # -- Certificate filename
      certFilename: ""
      # -- Certificate key filename
      certKeyFilename: ""
      # -- CA Certificate filename
      certCAFilename: ""
      # -- File containing a Certificate Revocation List
      crlFilename: ""

    global:
      postgresql:
        # global.postgresql.auth overrides postgresql.auth
        auth:
          # database credentials to use if you don't use an existingSecret
          # -- username of matrix-authentication-service postgres user
          username: mas
          # -- password of matrix-authentication-service postgres user - ignored using exsitingSecret
          password: changeme
          # -- which port to use to connect to your database server
          port: 5432
          # -- name of the database
          database: mas
          # -- Name of existing secret to use for PostgreSQL credentials
          existingSecret: ""
          # secretKeys to grab from existingSecret
          # if postgresql.existingSecret is provided, the following are ignored
          # postgresql.password/username/hostname/database
          secretKeys:
            # -- key in existingSecret with hostname of the database
            databaseHostname: hostname
            # -- key in existingSecret with name of the database
            database: database
            # -- key in existingSecret with username for matrix-authentication-service to connect to db
            databaseUsername: username
            # -- key in existingSecret with password for matrix-authentication-service to connect to db
            userPasswordKey: password
            # -- key in existingSecret with the admin postgresql password
            adminPasswordKey: postgresPassword

    # primary database node config
    primary:
      # -- run the scripts in templates/postgresql/initdb-configmap.yaml
      # If using an external Postgres server, make sure to configure the database
      # ref: https://github.com/matrix-org/synapse/blob/master/docs/postgres.md
      initdb:
        scriptsConfigMap: "{{ .Release.Name }}-postgresql-initdb"

      podSecurityContext:
        enabled: true
        runAsUser: 1000
        fsGroup: 1000

  # matrix authentication external database settings
  externalDatabase:
    # -- enable using an external database *instead of* the Bitnami PostgreSQL sub-chart
    # if externalDatabase.enabled is set to true, postgresql.enabled must be set to false
    enabled: false
    # optional SSL parameters for postgresql, if using your own db instead of the subchart
    # ref: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PARAMKEYWORDS
    # -- sslmode to use, example: verify-full
    sslmode: ""
    # make sure any paths here are reflected in matrix-authentication-service.extraVolumes and matrix-authentication-service.extraVolumeMounts
    # -- optional: tls/ssl root cert for postgresql connections
    sslrootcert: ""
    # -- optional: tls/ssl cert for postgresql connections
    sslcert: ""
    # -- optional: tls/ssl key for postgresql connections
    sslkey: ""
    # database credentials to use if you don't use an existingSecret
    # -- username of matrix-authentication-service postgres user
    username: mas
    # -- password of matrix-authentication-service postgres user - ignored using exsitingSecret
    password: changeme
    # -- which port to use to connect to your database server
    port: 5432
    # -- hostname of db server. Can be left blank if using postgres subchart
    hostname: ""
    # -- name of the database to try and connect to
    database: "mas"
    # -- Name of existing secret to use for PostgreSQL credentials
    existingSecret: ""
    # if externalDatabase.existingSecret is provided, the following are ignored
    # password, username, hostname, database
    # secretKeys to grab from existingSecret
    secretKeys:
      # -- key in existingSecret with hostname of the database
      databaseHostname: hostname
      # -- key in existingSecret with name of the database
      database: database
      # -- key in existingSecret with username for matrix to connect to db
      databaseUsername: username
      # -- key in existingSecret with password for matrix to connect to db
      userPasswordKey: password
      # -- key in existingSecret with the admin postgresql password
      adminPasswordKey: postgresPassword

  networkPolicies:
    enabled: true

  # this is for storing your matrix authentication service config file
  configVolume:
    # -- name of an existing persistent volume claim to use for matrix-authentication-service config. If provided, ignores mas parameter map
    existingClaim: ""
    # -- name of storage class for the persistent volume
    storageClassName: "default"
    # -- storage capacity for creating a persistent volume
    storage: "500Mi"

  # this stands for Matrix Authentication Service
  mas:
    masClientSecret:
      # -- use an existing secret for clients section of config.yaml for:
      # mas.clients[0].client_id, mas.clients[0].client_secret
      # if set, ignores mas.clients[0].client_id, mas.clients[0].client_secret
      existingSecret: ""

      secretKeys:
        # -- key in secret with the client_id
        client_id: "client_id"
        # -- key in secret with the client_secret
        client_secret: "client_secret"

    # see more info here:  https://matrix-org.github.io/matrix-authentication-service/reference/configuration.html#clients
    clients:
        # -- a unique identifier for the client. It must be a valid ULID, and it happens that 0000000000000000000SYNAPSE is a valid ULID.
      - client_id: ""
        # -- set to client_secret_basic. Other methods are possible, such as client_secret_post, but this is the easiest to set up.
        client_auth_method: client_secret_basic
        # -- a shared secret used for the homeserver to authenticate
        client_secret: ""

    matrix:
      # -- name of your matrix home server (synapse or dendrite) with port if needed
      homeserver: "localhost:8008"
      # -- a shared secret the service will use to call the homeserver admin API
      secret: "test"
      # -- endpoint of your matrix home server (synapse or dendrite) with port if needed
      endpoint: "https://localhost:8008"
      # -- grab the above secret from an existing k8s secret. if set, ignores mas.matrix.secret
      existingSecret: ""
      # -- name of the key in existing secret to grab matrix.secret from
      secretKey: "secret"

    policy:
      data:
        # -- Users which are allowed to ask for admin access. If possible, use the
        # can_request_admin flag on users instead.
        admin_users: []
        #  - person1
        #  - person2

        # -- Client IDs which are allowed to ask for admin access with a
        # client_credentials grant
        admin_clients: []
        #  - 01H8PKNWKKRPCBW4YGH1RWV279
        #  - 01HWQCPA5KF10FNCETY9402WGF

        # Dynamic Client Registration
        client_registration:
          # -- don't require URIs to be on the same host. default: false
          allow_host_mismatch: true
          # -- allow non-SSL and localhost URIs. default: false
          allow_insecure_uris: true

        # Registration using passwords
        passwords:
          # -- minimum length of a password. default: 0
          min_length: 16
          # -- require at least one lowercase character in a password. default: false
          require_lowercase: true
          # -- require at least one uppercase character in a password. default: false
          require_uppercase: true
          # -- require at least one number in a password. default: false
          require_number: true

    # see: https://matrix-org.github.io/matrix-authentication-service/setup/sso.html?highlight=ulid#general-configuration
    # and also see: https://matrix-org.github.io/matrix-authentication-service/setup/sso.html#keycloak
    upstream_oauth2:

      # -- use an existing k8s secret for upstream oauth2 client_id and client_secret
      existingSecret: ""
      secretKeys:
        # -- key in secret with the issuer
        issuer: "issuer"
        # -- key in secret with the client_id
        client_id: "client_id"
        # -- key in secret with the client_secret
        client_secret: "client_secret"
        # -- key in secret with the authorization_endpoint if discovery is disabled
        # authorization_endpoint: ""
        # -- key in secret with the token_endpoint if discovery is disabled
        # token_endpoint: ""
        # -- key in secret with the userinfo_endpoint if discovery is disabled
        # userinfo_endpoint: ""

      # only one provider supported for using existing secrets at this time, but if you want more, feel free to submit a PR
      providers:
        # -- A unique identifier for the provider
        # Must be a valid ULID, and can be generated using online tools like:
        # https://www.ulidtools.com
        - id: ""

          # -- The issuer URL, which will be used to discover the provider's configuration.
          # If discovery is enabled, this *must* exactly match the `issuer` field
          # advertised in `<issuer>/.well-known/openid-configuration`.
          issuer: https://example.com/

          # -- A human-readable name for the provider, which will be displayed on the login page
          human_name: Example

          # -- A brand identifier for the provider, which will be used to display a logo
          # on the login page. Values supported by the default template are:
          #  - `apple`
          #  - `google`
          #  - `facebook`
          #  - `github`
          #  - `gitlab`
          #  - `twitter`
          brand_name: zitadel

          # -- The client ID to use to authenticate to the provider
          client_id: ""

          # -- The client secret to use to authenticate to the provider
          # This is only used by the `client_secret_post`, `client_secret_basic`
          # and `client_secret_jwk` authentication methods
          client_secret: ""

          # -- Which authentication method to use to authenticate to the provider
          # Supported methods are:
          #   - `none`
          #   - `client_secret_basic`
          #   - `client_secret_post`
          #   - `client_secret_jwt`
          #   - `private_key_jwt` (using the keys defined in the `secrets.keys` section)
          token_endpoint_auth_method: client_secret_basic

          # -- Which signing algorithm to use to sign the authentication request when using
          # the `private_key_jwt` or the `client_secret_jwt` authentication methods
          # token_endpoint_auth_signing_alg: RS256

          # -- The scopes to request from the provider
          # In most cases, it should always include `openid` scope
          scope: "openid email profile"

          # How the provider configuration and endpoints should be discovered
          # Possible values are:
          #  - `oidc`: discover the provider through OIDC discovery,
          #     with strict metadata validation (default)
          #  - `insecure`: discover through OIDC discovery, but skip metadata validation
          #  - `disabled`: don't discover the provider and use the endpoints below
          # discovery_mode: oidc

          # -- Whether PKCE should be used during the authorization code flow.
          # Possible values are:
          #  - `auto`: use PKCE if the provider supports it (default)
          #    Determined through discovery, and disabled if discovery is disabled
          #  - `always`: always use PKCE (with the S256 method)
          #  - `never`: never use PKCE
          pkce_method: auto

          # -- The provider authorization endpoint
          # This takes precedence over the discovery mechanism
          authorization_endpoint: https://example.com/oauth2/authorize

          # The provider token endpoint
          # This takes precedence over the discovery mechanism
          # token_endpoint: https://example.com/oauth2/token

          # The provider JWKS URI
          # This takes precedence over the discovery mechanism
          # jwks_uri: https://example.com/oauth2/keys

          # How user attributes should be mapped
          #
          # Most of those attributes have two main properties:
          #   - `action`: what to do with the attribute. Possible values are:
          #      - `ignore`: ignore the attribute
          #      - `suggest`: suggest the attribute to the user, but let them opt out
          #      - `force`: always import the attribute, and don't fail if it's missing
          #      - `require`: always import the attribute, and fail if it's missing
          #   - `template`: a Jinja2 template used to generate the value. In this template,
          #      the `user` variable is available, which contains the user's attributes
          #      retrieved from the `id_token` given by the upstream provider.
          #
          # Each attribute has a default template which follows the well-known OIDC claims.
          #
          claims_imports:
            # -- The subject is an internal identifier used to link the
            # user's provider identity to local accounts.
            # By default it uses the `sub` claim as per the OIDC spec,
            # which should fit most use cases.
            subject:
              template: "{{ user.sub }}"

            # -- The localpart is the local part of the user's Matrix ID.
            # For example, on the `example.com` server, if the localpart is `alice`,
            #  the user's Matrix ID will be `@alice:example.com`.
            localpart:
              action: require
              template: "{{ user.preferred_username }}"

            # -- The display name is the user's display name.
            displayname:
              action: suggest
              template: "{{ user.name }}"

            # -- An email address to import.
            email:
              action: suggest
              template: "{{ user.email }}"
              # -- Whether the email address must be marked as verified.
              # Possible values are:
              #  - `import`: mark the email address as verified if the upstream provider
              #     has marked it as verified, using the `email_verified` claim.
              #     This is the default.
              #   - `always`: mark the email address as verified
              #   - `never`: mark the email address as not verified
              set_email_verification: always


# Element client configuration. see: https://element.io/
element:
  # -- Set to false to disable a deployment of Element. Users will still be able
  # to connect via any other instances of Element e.g. https://app.element.io,
  # Element Desktop, or any other Matrix clients
  enabled: true

  ingress:
    # -- ingressClassName for the k8s ingress
    className: "nginx"
    # -- enable ingress for element
    enabled: true
    tls:
      # -- enable a fairly stock ingress, open a github issue if you need more features
      enabled: true
      # -- name for the element tls secret for ingress
      secretName: "element-tls"
    # -- the hostname to use for element
    host: element.chart-example.local
    annotations:
      # This annotation is required for the Nginx ingress provider. You can
      # remove it if you use a different ingress provider
      nginx.ingress.kubernetes.io/configuration-snippet: |
        proxy_intercept_errors off;
      # -- required for TLS certs issued by cert-manager
      cert-manager.io/cluster-issuer: letsencrypt-staging

  # Organization/enterprise branding
  branding:
    # -- brand shown in email notifications
    brand: "Element"
    # -- Background of login splash screen
    welcomeBackgroundUrl: ""
    # -- Logo shown at top of login screen
    authHeaderLogoUrl: ""
    # -- Array of links to show at the bottom of the login screen
    authFooterLinks: []
    #  - text:
    #    url:

  # Element integrations configuration
  integrations:
    # -- enables the Integrations menu, including:
    #    widgets, bots, and other plugins to Element
    #    disabled by default as this is for enterprise users
    enabled: false
    # -- UI to load when a user selects the Integrations button at the top-right
    #    of a room
    ui: "https://scalar.vector.im/"
    # -- API for the integration server
    api: "https://scalar.vector.im/api"
    # -- Array of API paths providing widgets
    widgets:
      - "https://scalar.vector.im/_matrix/integrations/v1"
      - "https://scalar.vector.im/api"
      - "https://scalar-staging.vector.im/_matrix/integrations/v1"
      - "https://scalar-staging.vector.im/api"
      - "https://scalar-staging.element.im/scalar/api"

  # -- Experimental features in Element, see:
  # https://github.com/vector-im/element-web/blob/develop/docs/labs.md
  labs:
    - feature_new_spinner
    - feature_pinning
    - feature_custom_status
    - feature_custom_tags
    - feature_state_counters
    - feature_many_integration_managers
    - feature_mjolnir
    - feature_dm_verification
    - feature_bridge_state
    - feature_presence_in_room_list
    - feature_custom_themes

  # -- Servers to show in the Explore menu (the current server is always shown)
  roomDirectoryServers:
    - matrix.org

  # -- Set to the user ID (@username:domain.tld) of a bot to invite all new
  # users to a DM with the bot upon registration
  welcomeUserId: ""

  # -- Prefix before permalinks generated when users share links to rooms,
  # users, or messages. If running an unfederated Synapse, set the below to the
  # URL of your Element instance.
  permalinkPrefix: "https://matrix.to"

  # Element Kubernetes resource settings
  image:
    # -- registry and repository to use for element docker image
    repository: "vectorim/element-web"
    # -- tag to use for element docker image
    tag: v1.11.67
    # -- pullPolicy to use for element image, set to Always if using latest tag
    pullPolicy: IfNotPresent
  service:
    # -- service type for element
    type: ClusterIP
    # -- service port for element
    port: 80

  # -- replicas for element pods
  replicaCount: 1
  resources: {}
  probes:
    readiness: {}
    startup: {}
    liveness: {}

  # -- Element specific labels
  labels:
    component: element

# Settings for Coturn TURN relay, used for routing voice calls
coturn:
  # -- Set to false to disable the included deployment of Coturn
  enabled: false

  certificate:
    # -- set to true to generate a TLS certificate for encrypted comms
    enabled: false
    # -- hostname for TLS cert
    host: turn.example.com
    # -- cert-manager cert Issuer or ClusterIssuer to use
    issuerName: "letsencrypt-staging"

  # -- URIs of the Coturn servers. If deploying Coturn with this chart, include
  # the public IPs of each node in your cluster (or a DNS round-robin hostname)
  # You can also include an external Coturn instance if you'd prefer
  uris: []
  #  - "turn:turn.example.com?transport=udp"

  # -- Whether to allow guests to use the TURN server
  allowGuests: true

  # -- shared secert for comms b/w Synapse/Coturn. autogenerated if not provided
  sharedSecret: ""
  # -- Optional: name of an existingSecret with key for sharedSecret
  existingSecret: ""
  # -- key in existing secret with sharedSecret value. Required if
  # coturn.enabled=true and existingSecret not ""
  secretKey: "coturnSharedSecret"

  # -- UDP port range for TURN connections
  ports:
    from: 3478
    to: 3478

  service:
    # The type of service to deploy for routing Coturn traffic. Options:
    #   ClusterIP: Recommended for DaemonSet configurations. This will create a
    #              standard Kubernetes service for Coturn within the cluster.
    #              No external networking will be configured as the DaemonSet
    #              will handle binding to each Node's host networking
    #
    #   NodePort:  Recommended for Deployment configurations. This will open
    #              TURN ports on every node and route traffic on these ports to
    #              the Coturn pods. You will need to make sure your cloud
    #              provider supports the cluster config setting,
    #              apiserver.service-node-port-range, as this range must contain
    #              the ports defined above for the service to be created.
    type: ClusterIP
    # -- I don't actually know what this is 🤔 open a PR if you know
    externalTrafficPolicy: Local

  image:
    # -- container registry and repo for coturn docker image
    repository: "coturn/coturn"
    # -- docker tag for coturn server
    tag: ""
    # -- image pull policy, set to Always if using image.tag: latest
    pullPolicy: IfNotPresent

  # -- ref: kubernetes.io/docs/concepts/configuration/manage-resources-containers
  resources: {}

  # -- Coturn specific labels
  labels:
    component: coturn

  externalDatabase:
    # -- enables the use of postgresql instead of the default sqlite for coturn
    # to use the bundled subchart, enable this, and postgresql.enable
    enabled: false
    # -- Currently only postgresql is supported. mysql coming soon
    type: "postgresql"
    # -- required if externalDatabase.enabled: true and postgresql.enabled:false
    hostname: ""
    # -- username for database, ignored if existingSecret is passed in
    username: ""
    # -- password for database, ignored if existingSecret is passed in
    password: ""
    # -- database to create, ignored if existingSecret is passed in
    database: ""
    # -- name of existing Secret to use for postgresql credentials
    existingSecret: ""
    # Names of the keys in existing secret to use for PostgreSQL credentials
    secretKeys:
      # -- key in existing Secret to use for the db user
      username: ""
      # -- key in existing Secret to use for db user's password
      password: ""
      # -- key in existing Secret to use for the database name
      database: ""
      # -- key in existing Secret to use for the db's hostname
      hostname: ""

  # PostgreSQL chart configuration for coturn
  # see: https://github.com/bitnami/charts/tree/main/bitnami/postgresql
  postgresql:
    # -- enables bitnami postgresql subchart, you can disable to use external db
    enabled: false
    global:
      postgresql:
        # -- global.postgresql.auth overrides postgresql.auth
        auth:
          # -- username for database, ignored if existingSecret is passed in
          username: "coturn"
          # -- password for db, autogenerated if empty & existingSecret empty
          password: ""
          # -- database to create, ignored if existingSecret is passed in
          database: "coturn"
          # -- name of existing Secret to use for postgresql credentials
          existingSecret: ""
          # Names of the keys in existing secret to use for PostgreSQL creds
          # all of these are ignored if existingSecret is empty
          secretKeys:
            # -- key in existingSecret for database to create
            hostname: "hostname"
            # -- key in existingSecret for database to create
            database: "database"
            # -- key in exsiting Secret to use for the coturn user
            username: "username"
            # -- key in existing Secret to use for postgres admin user's password
            adminPasswordKey: "postgresPassword"
            # -- key in existing Secret to use for coturn user's password
            userPasswordKey: "password"

  persistence:
    # -- existing PVC to use instead of creating one on the fly
    existingClaim: ""
    # -- annotations for the PVC, ignored if persistence.existingClaim passed in
    annotations: {}
    # -- access mode for the PVC, ignored if persistence.existingClaim passed in
    accessMode: "ReadWriteOnce"
    # -- size of the PVC, ignored if persistence.existingClaim passed in
    size: "1Mi"
    # -- storageClass for the PVC, ignored if persistence.existingClaim passed in
    storageClass: ""

  # most coturn config parameters that you really need
  coturn:
    # --  hostname for the coturn server realm
    realm: "turn.example.com"

    auth:
      # -- username for the main user of the turn server
      username: "coturn"
      # -- password for the main user of the turn server
      password: ""
      # -- existing secret with keys username/password for coturn
      existingSecret: ""
      secretKeys:
        # -- key in existing secret for turn server user
        username: username
        # -- key in existing secret for turn server user's password
        password: password

    # -- coturn's listening IP address
    listeningIP: "0.0.0.0"

    ports:
      # -- minimum ephemeral port for coturn
      min: 49152
      # -- maximum ephemeral port for coturn
      max: 65535
      # -- insecure listening port
      listening: 3478
      # -- secure listening port
      tlsListening: 5349

    # -- set the logfile. Defaults to stdout for use with kubectl logs
    logFile: "stdout"

    # -- extra configuration for turnserver.conf
    extraTurnserverConfiguration: |
      verbose

  # k8s pod security context:
  # https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  securityContext:
    # -- for all Containers in the Pod, all processes run w/ this userID
    runAsUser: 1000
    # -- for all Containers in the Pod, all processes run w/ this GroupID
    runAsGroup: 1000
    # -- all processes of the container are also part of the supplementary groupID
    fsGroup: 1000
    # -- allow modificatin to root filesystem
    readOnlyRootFilesystem: false
    # -- allow priviledged access
    allowPrivilegeEscalation: true
    capabilities:
      # -- linux cabilities to allow for the coturn k8s pod
      add: ["NET_BIND_SERVICE"]
      # -- linux cabilities to disallow for the coturn k8s pod
      drop: ["ALL"]


# Settings for email notifications
mail:
  # -- disabled all email notifications by default. NOTE: If enabled, either
  # enable the Exim relay or configure an external mail server below
  enabled: false
  # -- Name and email address for outgoing mail
  from: "Matrix <matrix@example.com>"
  # -- Optional: Element instance URL.
  # If ingress is enabled, this is unnecessary, else if this is empty, emails
  # will contain a link to https://app.element.io
  elementUrl: ""

  # Exim relay
  relay:
    # -- whether to enable exim relay or not
    enabled: true
    image:
      repository: "devture/exim-relay"
      tag: "4.95-r0"
      pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 25
    replicaCount: 1
    resources: {}
    probes:
      readiness: {}
      startup: {}
      liveness: {}
    # Mail relay specific labels
    labels:
      component: mail

  # External SMTP (mail) server
  external:
    # -- External mail server hostname - ignored if existingSecret not ""
    host: ""
    # -- External mail server port INSECURE: 25, SSL: 465, STARTTLS: 587
    port: 587
    # -- External mail server username - ignored if existingSecret not ""
    username: ""
    # -- External mail server password - ignored if existingSecret not ""
    password: ""
    # -- require TLS, I think
    requireTransportSecurity: true
    # -- use an existing k8s Secret for your host, username, and password
    existingSecret: ""
    # -- secret keys to use for your existing SMTP server
    secretKeys:
      host: "host"
      username: "username"
      password: "password"

bridges:
  irc:
    # -- Set to true to enable the IRC bridge
    enabled: false
    # -- Whether to enable presence (online/offline indicators). If presence is
    # disabled for the homeserver (above), it should be disabled here too
    presence: false
    # -- Postgres database to store IRC bridge data in, this db will be created
    # if postgresql.enabled: true, otherwise you must create it manually
    database: "matrix_irc"
    databaseSslVerify: true

    # Object of IRC servers to connect to. Ref: https://tinyurl.com/mr2ee5ts
    servers:
      chat.freenode.net:
        # -- A human-readable short name.
        name: "Freenode"
        # -- The port to connect to. Optional.
        port: 6697
        # -- Whether to use SSL or not. Default: false.
        ssl: true

    data:
      # -- Size of the data PVC to allocate
      capacity: 1Mi

    image:
      repository: "matrixdotorg/matrix-appservice-irc"
      tag: "release-1.0.1"
      pullPolicy: IfNotPresent
    replicaCount: 1
    resources: {}
    service:
      type: ClusterIP
      port: 9006

  whatsapp:
    # -- Set to true to enable the WhatsApp bridge
    enabled: false

    bot:
      # -- Username of the WhatsApp bridge bot
      username: "whatsappbot"
      # -- display name of the WhatsApp bridge bot
      displayName: "WhatsApp bridge bot"
      # -- avatar of the WhatsApp bridge bot
      avatar: "mxc://maunium.net/NeXNQarUbrlYBiPCpprYsRqr"

    # -- Permissions for using the bridge.
    # Permitted values:
    # relaybot - Talk through the relaybot (if enabled), no access otherwise
    #     user - Access to use the bridge to chat with a WhatsApp account.
    #    admin - User level and some additional administration tools
    # Permitted keys:
    #        * - All Matrix users
    #   domain - All users on that homeserver
    #     mxid - Specific user
    permissions:
      "*": relaybot

    # WhatsApp server connection settings
    connection:
      # -- WhatsApp server connection timeout (seconds)
      timeout: 20
      # -- Number of QR codes to store, which multiplies the connection timeout
      qrRegenCount: 2
      # -- Maximum number of connection attempts before failing
      maxAttempts: 3
      # -- Retry delay. Negative numbers are exponential backoff:
      # -connection_retry_delay + 1 + 2^attempts
      retryDelay: -1
      # -- Whether or not to notify the user when attempting to reconnect. Set
      # to false to only report when maxAttempts has been reached
      reportRetry: true

    # -- Send notifications for incoming calls
    callNotices: true

    users:
      # -- Username for WhatsApp users. Evaluated as a template where {{.}} is
      # replaced with the phone number of the WhatsApp user
      username: "whatsapp_{{.}}"

      # -- Display name for WhatsApp users
      # Evaluated as a template, with variables:
      # {{.Notify}} - nickname set by the WhatsApp user
      # {{.Jid}}    - phone number (international format)
      # following vars are available, but cause issue on multi-user instances:
      # {{.Name}}   - display name from contact list
      # {{.Short}}  - short display name from contact list
      displayName: "{{if .Notify}}{{.Notify}}{{else}}{{.Jid}}{{end}} (WA)"

    # -- Display name for communities. A community will be automatically
    # generated for each user using the bridge, and can be used to group
    # WhatsApp chats together. Evaluated as a template, with variables:
    # {{.Localpart}} - MXID localpart
    # {{.Server}}    - MXID server part of the user.
    communityName: "whatsapp_{{.Localpart}}={{.Server}}"

    relaybot:
      # -- Set to true to enable the relaybot and management room
      enabled: false

      # -- Management room for the relay bot where status notifs are posted
      management: "!foo:example.com"

      # Users to invite to the management room automatically
      invites: []

    data:
      # -- Size of the PVC to allocate for the SQLite database
      capacity: 512Mi
      # -- Storage class (optional)
      storageClass: ""

    image:
      repository: "dock.mau.dev/tulir/mautrix-whatsapp"
      tag: "latest"
      pullPolicy: Always
    replicaCount: 1
    resources: {}
    service:
      type: ClusterIP
      port: 29318

  discord:
    # -- Set to true to enable the Discord bridge
    enabled: false

    # Discord bot authentication.
    # ref: github.com/Half-Shot/matrix-appservice-discord#setting-up-discord
    auth:
      # -- Discord bot clientID for authentication
      clientId: ""
      # -- Discord bot token for authentication
      botToken: ""

    # The name of bridged rooms
    # Available vars:
    #   :guild - guild/server name
    #   :name  - channel name prefixed with #
    channelName: "[Discord] :guild :name"

    users:
      # -- Nickname of bridged Discord users
      # Available vars:
      #   :nick     - user's Discord nickname
      #   :username - user's Discord username
      #   :tag      - user's 4 digit Discord tag
      #   :id       - user's Discord developer ID (long)
      nickname: ":nick"
      # -- Username of bridged Discord users
      # Available vars:
      #   :username - user's Discord username
      #   :tag      - user's 4 digit Discord tag
      #   :id       - user's Discord developer ID (long)
      username: ":username#:tag"

    # -- Set to false to disable online/offline presence for Discord users
    presence: true

    # -- Set to false to disable typing notifications (only for Discord to Matrix)
    typingNotifications: true

    # -- Set to true to allow users to bridge rooms themselves using !discord cmds
    # More info: https://t2bot.io/discord
    selfService: false

    # -- Discord bot read receipt, which advances whenever the bot bridges a msg
    readReceipt: true

    # -- Discord notifications when a user joins/leaves the Matrix channel
    joinLeaveEvents: true

    # -- Default visibility of bridged rooms (public/private)
    defaultVisibility: public

    data:
      # -- Size of the PVC to allocate for the SQLite database
      capacity: 512Mi
      # -- Storage class (optional)
      storageClass: ""

    image:
      # -- docker image repo for discord bridge
      repository: "halfshot/matrix-appservice-discord"
      # -- tag for discord brdige docker image
      tag: "latest"
      pullPolicy: Always
    replicaCount: 1
    resources: {}
    service:
      type: ClusterIP
      port: 9005
  # -- Recommended to leave this disabled to allow bridges to be scheduled on
  # separate nodes. Set this to true to reduce latency between the homeserver
  # and bridges, or if your cloud provider does not allow the ReadWriteMany
  # access mode (see below)
  affinity: false
  volume:
    # -- Capacity of the shared volume for storing bridge/appservice
    # registration files. Note: 1Mi should be enough but some cloud providers
    # may set a minimum PVC size of 1Gi, adjust as necessary
    capacity: 1Mi
    # -- Storage class (optional)
    storageClass: ""
    # -- Access mode of the shared volume. ReadWriteMany is recommended to allow
    # bridges to be scheduled on separate nodes. Some cloud providers may not
    # allow the ReadWriteMany access mode. In that case, change this to
    # ReadWriteOnce AND set bridges.affinity (above) to true
    accessMode: ReadWriteMany
    # -- name of an existing persistent volume claim to use for bridges
    existingClaim: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

networkPolicies:
  # -- whether to enable kubernetes network policies or not
  enabled: true
