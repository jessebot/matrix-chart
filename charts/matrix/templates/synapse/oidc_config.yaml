{{/*
if postgresql.global.postgresql.auth.existingSecret is not passed in, then we create a
secret to store the credentials without it being in a configmap in plaintext.
*/}}
{{- if and .Values.matrix.oidc_config.enabled (not .Values.matrix.oidc_config.existingSecret) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "matrix.fullname" . }}-oidc-secret
  labels:
    app.kubernetes.io/name: {{ include "matrix.name" . }}
    helm.sh/chart: {{ include "matrix.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
type: Opaque
data:
  issuer: {{ .Values.matrix.oidc_config.issuer | b64enc | quote }}
  client_id: {{ .Values.matrix.oidc_config.client_id | b64enc | quote }}
  client_secret: {{ .Values.matrix.oidc_config.client_secret | b64enc | quote }}
  {{- if not .Values.matrix.oidc_config.discover }}
  authorization_endpoint: {{ .Values.matrix.oidc_config.authorization_endpoint | b64enc | quote }}
  token_endpoint: {{ .Values.matrix.oidc_config.token_endpoint | b64enc | quote }}
  userinfo_endpoint: {{ .Values.matrix.oidc_config.userinfo_endpoint | b64enc | quote }}
  {{- if eq .Values.matrix.oidc_config.scopes "openid" }}
  jwks_uri: {{ .Values.matrix.oidc_config.jwks_uri | b64enc | quote }}
  {{- end }}
  {{- end }}
{{- end }}
