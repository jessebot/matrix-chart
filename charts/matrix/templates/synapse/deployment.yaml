apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "matrix.fullname" . }}-synapse
  labels:
{{ include "matrix.labels" . | indent 4 }}
{{ include "matrix.synapse.labels" . | indent 4}}
spec:
  replicas: {{ .Values.synapse.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "matrix.name" . }}-synapse
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        # re-roll deployment on homeserver.yaml change
        checksum/synapse-config: {{ include (print $.Template.BasePath "/synapse/configmap.yaml") . | sha256sum }}
      labels:
        app.kubernetes.io/name: {{ include "matrix.name" . }}-synapse
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      
      securityContext:
        {{- if .Values.synapse.securityContext.runAsUser }}
        runAsUser: {{ .Values.synapse.securityContext.runAsUser }}
        {{- end }}
        {{- if .Values.synapse.securityContext.runAsGroup }}
        runAsGroup: {{ .Values.synapse.securityContext.runAsGroup }}
        {{- end }}
        {{- if .Values.synapse.securityContext.fsGroup }}
        fsGroup: {{ .Values.synapse.securityContext.fsGroup }}
        {{- end}}
        {{- if .Values.synapse.securityContext.runAsNonRoot }}
        runAsNonRoot: {{ .Values.synapse.securityContext.runAsNonRoot }}
        {{- end }}
      initContainers:
        - name: add-secret-values-to-config
          image: "mikefarah/yq:latest"
          imagePullPolicy: Always
          env:
            - name: DATABASE_HOSTNAME
              {{- if .Values.postgresql.enabled }}
              value: {{ template "postgresql.primary.fullname" .Subcharts.postgresql }}
              {{ else }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix.postgresql.secretName" . }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.databaseHostname }}
              {{- end }}
            - name: DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix.postgresql.secretName" . }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.database }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix.postgresql.secretName" . }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.databaseUsername }}
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix.postgresql.secretName" . }}
                  key: {{ .Values.postgresql.global.postgresql.auth.secretKeys.userPasswordKey}}
            - name: COTURN_SHARED_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ include "matrix.coturn.secretName" . }}
                  key: {{ .Values.coturn.secretKey }}
          command:
            - /bin/sh
            - -ec
            - |
              cp /initial/{{ .Values.matrix.serverName }}.log.config /data/ && \
              cp /initial/homeserver.yaml /data/homeserver.yaml && \
              yq eval -i '.database.args.host = env(DATABASE_HOSTNAME)' /data/homeserver.yaml && \
              yq eval -i '.database.args.database = env(DATABASE)' /data/homeserver.yaml && \
              yq eval -i '.database.args.user = env(DATABASE_USERNAME)' /data/homeserver.yaml && \
              yq eval -i '.database.args.password = env(DATABASE_PASSWORD)' /data/homeserver.yaml && \
              yq eval -i '.turn_shared_secret = env(COTURN_SHARED_SECRET)' /data/homeserver.yaml
          volumeMounts:
            - name: synapse-initial-config
              mountPath: /initial
            - name: synapse-config
              mountPath: /data
      # generate signing key only on fresh install
      {{- if .Release.IsInstall }}
        - name: generate-signing-key
          image: {{ include "matrix.image" . }}
          imagePullPolicy: {{ .Values.synapse.image.pullPolicy }}
          env:
            - name: SYNAPSE_SERVER_NAME
              value: {{ .Values.matrix.serverName }}
            - name: SYNAPSE_REPORT_STATS
              value: {{ .Values.matrix.telemetry | ternary "yes" "no" | quote }}
          command: ["python"]
          args:
            - "-m"
            - "synapse.app.homeserver"
            - "--config-path"
            - "/data/homeserver.yaml"
            - "--keys-directory"
            - "/data/keys"
            - "--generate-keys"
          volumeMounts:
            - name: synapse-config
              mountPath: /data
            - name: signing-key
              mountPath: /data/keys
      {{- end }} {{/* end if .Release.IsInstall */}}
      containers:
        - name: "synapse"
          image: {{ include "matrix.image" . }}
          imagePullPolicy: {{ .Values.synapse.image.pullPolicy }}
          env:
            {{- if .Values.synapse.securityContext.env }}
            {{- if .Values.synapse.securityContext.runAsUser }}
            - name: UID
              value: "{{ .Values.synapse.securityContext.runAsUser }}"
            {{- end }}
            {{- if .Values.synapse.securityContext.runAsGroup }}
            - name: GID
              value: "{{ .Values.synapse.securityContext.runAsGroup }}"
            {{- end }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8008
              protocol: TCP
            {{- if .Values.synapse.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.synapse.metrics.port }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            - name: synapse-config
              mountPath: /data
            - name: signing-key
              mountPath: /data/keys
            - name: media-store
              mountPath: /data/media_store
            {{- if or .Values.bridges.whatsapp.enabled .Values.bridges.discord.enabled .Values.bridges.irc.enabled }}
            - name: bridges
              mountPath: /bridges
              readOnly: true
            {{- end }}
            - name: uploads
              mountPath: /data/uploads
            - name: tmp
              mountPath: /tmp
            {{- if gt (len .Values.synapse.extraVolumeMounts) 0 }}
            {{- toYaml .Values.synapse.extraVolumeMounts | nindent 12 }}
            {{- end }}
          readinessProbe:
            httpGet:
              path: /_matrix/static/
              port: http
            {{- if .Values.synapse.probes.readiness }}
            {{- toYaml .Values.synapse.probes.readiness | nindent 12 }}
            {{- end }}
          startupProbe:
            httpGet:
              path: /_matrix/static/
              port: http
            {{- if .Values.synapse.probes.startup }}
            {{- toYaml .Values.synapse.probes.startup | nindent 12 }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /_matrix/static/
              port: http
            {{- if .Values.synapse.probes.liveness }}
            {{- toYaml .Values.synapse.probes.liveness | nindent 12 }}
            {{- end }}
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
          {{- with .Values.synapse.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      volumes:
        - name: synapse-initial-config
          configMap:
            name: {{ include "matrix.fullname" . }}-initial-synapse-config
        - name: synapse-config
          persistentVolumeClaim:
            {{- if not .Values.volumes.synapseConfig.existingClaim }}
            claimName: {{ include "matrix.fullname" . }}-synapse-config
            {{ else }}
            claimName: {{ .Values.volumes.synapseConfig.existingClaim }}
            {{- end }}
        - name: signing-key
          persistentVolumeClaim:
            {{- if not .Values.volumes.signingKey.existingClaim }}
            claimName: {{ include "matrix.fullname" . }}-signing-key
            {{ else }}
            claimName: {{ .Values.volumes.signingKey.existingClaim }}
            {{- end }}
        - name: media-store
          persistentVolumeClaim:
            {{- if not .Values.volumes.media.existingClaim }}
            claimName: {{ include "matrix.fullname" . }}-media-store
            {{ else }}
            claimName: {{ .Values.volumes.media.existingClaim }}
            {{- end }}
        {{- if or .Values.bridges.whatsapp.enabled .Values.bridges.discord.enabled .Values.bridges.irc.enabled }}
        - name: bridges
          persistentVolumeClaim:
            {{- if not .Values.bridges.volume.existingClaim }}
            claimName: {{ include "matrix.fullname" . }}-bridges
            {{ else }}
            claimName: {{ .Values.bridges.volume.existingClaim }}
            {{- end }}
        {{- end }}
        # Ephemeral in-progress uploads
        - name: uploads
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        {{- if gt (len .Values.synapse.extraVolumes) 0 }}
        {{ toYaml .Values.synapse.extraVolumes | nindent 8}}
        {{- end }}
